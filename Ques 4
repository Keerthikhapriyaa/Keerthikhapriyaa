#include <stdio.h>
#include <stdlib.h>
#include <ctype.h> 
#define MAX 100 
struct Stack {
    int arr[MAX];
    int top;
};
void initializeStack(struct Stack* stack) {
    stack->top = -1;  
}
int isFull(struct Stack* stack) {
    return stack->top == MAX - 1;
}
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack is full!\n");
    } else {
        stack->arr[++stack->top] = value;
    }
}
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return -1;  
    } else {
        return stack->arr[stack->top--];
    }
}
int evaluatePostfix(char* expression) {
    struct Stack stack;
    initializeStack(&stack);

    for (int i = 0; expression[i] != '\0'; i++) {
        char ch = expression[i];
        if (ch == ' ') {
            continue;
        }
        if (isdigit(ch)) {
            push(&stack, ch - '0');
        }
        else {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);

            switch (ch) {
                case '+':
                    push(&stack, operand1 + operand2);
                    break;
                case '-':
                    push(&stack, operand1 - operand2);
                    break;
                case '*':
                    push(&stack, operand1 * operand2);
                    break;
                case '/':
                    if (operand2 != 0) {
                        push(&stack, operand1 / operand2);
                    } else {
                        printf("Error: Division by zero!\n");
                        return -1;  
                    }
                    break;
                default:
                    printf("Error: Unsupported operator %c\n", ch);
                    return -1;  
            }
        }
    }

    return pop(&stack);
}

int main() {
    char expression[] = "4 3 5 * +";  

    int result = evaluatePostfix(expression);

    printf("Result of the postfix expression '%s' is: %d\n", expression, result);

    return 0;
}
