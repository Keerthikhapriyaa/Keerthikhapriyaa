#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}
struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return newNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    }
    else {
        root->right = insert(root->right, data);
    }
    return root;
}
void findLeaf(struct Node* root) {
    if (root == NULL) {
        return;
    }
    if (root->left == NULL && root->right == NULL) {
        printf("%d ", root->data);
    }
    findLeaf(root->left);  
    findLeaf(root->right); 
}
void inorder(struct Node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);
    printf("%d ", root->data);  
    inorder(root->right);
}
struct Node* mirror(struct Node* root) {
    if (root == NULL) {
        return NULL;
    }
    struct Node* left = mirror(root->left);
    struct Node* right = mirror(root->right);
    root->left = right;
    root->right = left;
    return root;
}

int main() {
    struct Node* root = NULL;
    root = insert(root, 12);
    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 8);
    root = insert(root, 9);
    printf("Inorder of original tree: ");
    inorder(root);
    printf("\n");
    root = mirror(root);
    printf("Inorder of mirror tree: ");
    inorder(root);
    printf("\n");
    printf("Leaf nodes: ");
    findLeaf(root);
    printf("\n");

    return 0;
}
